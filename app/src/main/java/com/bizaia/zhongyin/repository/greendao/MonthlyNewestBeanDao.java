package com.bizaia.zhongyin.repository.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.bizaia.zhongyin.repository.data.MonthlyNewestBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MONTHLY_NEWEST_BEAN".
*/
public class MonthlyNewestBeanDao extends AbstractDao<MonthlyNewestBean, Long> {

    public static final String TABLENAME = "MONTHLY_NEWEST_BEAN";

    /**
     * Properties of entity MonthlyNewestBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property CoverUrl = new Property(2, String.class, "coverUrl", false, "COVER_URL");
        public final static Property FileUrl = new Property(3, String.class, "fileUrl", false, "FILE_URL");
        public final static Property Price = new Property(4, double.class, "price", false, "PRICE");
        public final static Property IsBuy = new Property(5, boolean.class, "isBuy", false, "IS_BUY");
        public final static Property Description = new Property(6, String.class, "description", false, "DESCRIPTION");
        public final static Property DownloadPath = new Property(7, String.class, "downloadPath", false, "DOWNLOAD_PATH");
        public final static Property DataJS1 = new Property(8, String.class, "dataJS1", false, "DATA_JS1");
        public final static Property DataJS2 = new Property(9, String.class, "dataJS2", false, "DATA_JS2");
        public final static Property UserId = new Property(10, String.class, "userId", false, "USER_ID");
        public final static Property ShareUrl = new Property(11, String.class, "shareUrl", false, "SHARE_URL");
    }


    public MonthlyNewestBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MonthlyNewestBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MONTHLY_NEWEST_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"COVER_URL\" TEXT," + // 2: coverUrl
                "\"FILE_URL\" TEXT," + // 3: fileUrl
                "\"PRICE\" REAL NOT NULL ," + // 4: price
                "\"IS_BUY\" INTEGER NOT NULL ," + // 5: isBuy
                "\"DESCRIPTION\" TEXT," + // 6: description
                "\"DOWNLOAD_PATH\" TEXT," + // 7: downloadPath
                "\"DATA_JS1\" TEXT," + // 8: dataJS1
                "\"DATA_JS2\" TEXT," + // 9: dataJS2
                "\"USER_ID\" TEXT," + // 10: userId
                "\"SHARE_URL\" TEXT);"); // 11: shareUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MONTHLY_NEWEST_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MonthlyNewestBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String coverUrl = entity.getCoverUrl();
        if (coverUrl != null) {
            stmt.bindString(3, coverUrl);
        }
 
        String fileUrl = entity.getFileUrl();
        if (fileUrl != null) {
            stmt.bindString(4, fileUrl);
        }
        stmt.bindDouble(5, entity.getPrice());
        stmt.bindLong(6, entity.getIsBuy() ? 1L: 0L);
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(7, description);
        }
 
        String downloadPath = entity.getDownloadPath();
        if (downloadPath != null) {
            stmt.bindString(8, downloadPath);
        }
 
        String dataJS1 = entity.getDataJS1();
        if (dataJS1 != null) {
            stmt.bindString(9, dataJS1);
        }
 
        String dataJS2 = entity.getDataJS2();
        if (dataJS2 != null) {
            stmt.bindString(10, dataJS2);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(11, userId);
        }
 
        String shareUrl = entity.getShareUrl();
        if (shareUrl != null) {
            stmt.bindString(12, shareUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MonthlyNewestBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String coverUrl = entity.getCoverUrl();
        if (coverUrl != null) {
            stmt.bindString(3, coverUrl);
        }
 
        String fileUrl = entity.getFileUrl();
        if (fileUrl != null) {
            stmt.bindString(4, fileUrl);
        }
        stmt.bindDouble(5, entity.getPrice());
        stmt.bindLong(6, entity.getIsBuy() ? 1L: 0L);
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(7, description);
        }
 
        String downloadPath = entity.getDownloadPath();
        if (downloadPath != null) {
            stmt.bindString(8, downloadPath);
        }
 
        String dataJS1 = entity.getDataJS1();
        if (dataJS1 != null) {
            stmt.bindString(9, dataJS1);
        }
 
        String dataJS2 = entity.getDataJS2();
        if (dataJS2 != null) {
            stmt.bindString(10, dataJS2);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(11, userId);
        }
 
        String shareUrl = entity.getShareUrl();
        if (shareUrl != null) {
            stmt.bindString(12, shareUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public MonthlyNewestBean readEntity(Cursor cursor, int offset) {
        MonthlyNewestBean entity = new MonthlyNewestBean( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // coverUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fileUrl
            cursor.getDouble(offset + 4), // price
            cursor.getShort(offset + 5) != 0, // isBuy
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // description
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // downloadPath
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // dataJS1
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // dataJS2
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // userId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // shareUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MonthlyNewestBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCoverUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFileUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrice(cursor.getDouble(offset + 4));
        entity.setIsBuy(cursor.getShort(offset + 5) != 0);
        entity.setDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDownloadPath(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDataJS1(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDataJS2(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUserId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setShareUrl(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MonthlyNewestBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MonthlyNewestBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MonthlyNewestBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
